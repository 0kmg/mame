// license:BSD-3-Clause
// copyright-holders:Aaron Giles

//
// Netlist for Space Odyssey
//
// Derived from the schematics in the Space Odyssey manual.
//
// Known problems/issues:
//
//    * WIP.
//

#include "netlist/devices/net_lib.h"
#include "nl_astrob.h"


//
// Optimizations
//

#define ENABLE_FRONTIERS (0)



//
// Hacks
//



// AMI S2688 is compatible with MM5837
#define S2688_DIP MM5837_DIP

// MA150 Zener diode -- not really seeing this anywhere
// Possible subs: https://english.electronica-pt.com/components-cross-reference?ref=MA150
#define D_MA150(name) ZDIODE(name, "D(Is=0.1p Rs=16 CJO=2p Tt=12n Bv=100 Ibv=0.1p)")  // 1N4148
//#define D_MA150(name) ZDIODE(name, "D(Is=0.1p Rs=8 CJO=1p Tt=12n Bv=100 Ibv=0.1p)")  // 1N4149

// C458 NPN transistor -- not really seeing this anywhere either
// Possible subs: https://english.electronica-pt.com/components-cross-reference?ref=c458
#define Q_C458(name) QBJT_EB(name, "NPN")

#define TTL_74LS00_DIP TTL_7400_DIP
#define TTL_74LS04_DIP TTL_7404_DIP

// Totally faking this, no clue
static NETLIST_START(_MB4391)
	AFUNC(F1, 5, "((A1-A2)/(A4-A2))*A0")
	AFUNC(F2, 5, "((A1-A2)/(A4-A2))*A0")

	NET_C(F1.Q, R1.1)
	NET_C(F2.Q, R2.1)

	RES(R1, RES_K(1))
	RES(R2, RES_K(1))

	DIPPINS(   /*       +--------------+      */
		F1.A0, /*   1IN |1     ++    16| 1VSS */ F1.A4,
		F1.A1, /*  1CON |2           15| 1OUT */ R1.2,
		F1.A2, /*  1GND |3           14| 1R0  */ F1.A3,
		 NC.I, /*    NC |4   MB4391  13| NC   */ NC.I,
		F2.A0, /*   2IN |5           12| 2VSS */ F2.A4,
		F2.A1, /*  2CON |6           11| 2OUT */ R2.2,
		F2.A2, /*  2GND |7           10| 2R0  */ F2.A3,
		 NC.I, /*    NC |8            9| NC   */ NC.I
			   /*       +--------------+      */
	)
NETLIST_END()

#define MB4391_DIP(name) SUBMODEL(_MB4391, name)

// Clock generator for BBD. Just going to use a CLOCK
// for this since it's fixed frequency, but documenting
// it here for reference:
//
//         +--------------+
//     GND |1     ++     8| VGGOUT
//     CP1 |2            7| OX1
//     VDD |3   MN3101   6| OX2
//     CP2 |4            5| OX3
//         +--------------+


// 4096-stage delay. Until implemented, just pass in
// to out and be done with it
static NETLIST_START(_MN3005)
	RES(R1, RES_K(1))
	RES(R2, RES_K(1))
	NET_C(R1.1, R2.1)

	RES(RX1)
	RES(RX2)
	RES(RX3)
	NET_C(RX3.2, RX2.2)

	DIPPINS(   /*       +--------------+    */
		RX1.1, /*  GND |1     ++     8| VGG */ RX2.1,
		RX1.2, /*  CP2 |2            7| IN  */ R1.1,
		 R1.2, /* OUT1 |3   MN3005   6| CP1 */ RX2.2,
		 R2.2, /* OUT2 |4            5| VDD */ RX3.1
		       /*      +--------------+     */
	)
NETLIST_END()

#define MN3005_DIP(name) SUBMODEL(_MN3005, name)


//
// Main netlist
//

NETLIST_START(spaceod)

	SOLVER(Solver, 1000)
	PARAM(Solver.DYNAMIC_TS, 1)
	PARAM(Solver.DYNAMIC_MIN_TIMESTEP, 2e-5)

	LOCAL_SOURCE(_MB4391)
	LOCAL_SOURCE(_MN3005)

	TTL_INPUT(I_LO_D0, 0)
	ALIAS(I_BACK_G, I_LO_D0)
	TTL_INPUT(I_LO_D2, 0)
	ALIAS(I_SHORT_EXP, I_LO_D2)
	TTL_INPUT(I_LO_D4, 0)
	ALIAS(I_ACCELERATE, I_LO_D4)
	TTL_INPUT(I_LO_D5, 0)
	ALIAS(I_BATTLE_STAR, I_LO_D5)
	TTL_INPUT(I_LO_D6, 0)
	ALIAS(I_D_BOMB, I_LO_D6)
	TTL_INPUT(I_LO_D7, 0)
	ALIAS(I_LONG_EXP, I_LO_D7)

	NET_C(GND, I_LO_D0.GND, I_LO_D2.GND, I_LO_D4.GND, I_LO_D5.GND, I_LO_D6.GND, I_LO_D7.GND)
	NET_C(I_V5, I_LO_D0.VCC, I_LO_D2.VCC, I_LO_D4.VCC, I_LO_D5.VCC, I_LO_D6.VCC, I_LO_D7.VCC)

	TTL_INPUT(I_HI_D0, 0)
	ALIAS(I_SHOT, I_HI_D0)
	TTL_INPUT(I_HI_D1, 0)
	ALIAS(I_BONUS_UP, I_HI_D1)
	TTL_INPUT(I_HI_D3, 0)
	ALIAS(I_WARP, I_HI_D3)
	TTL_INPUT(I_HI_D6, 0)
	ALIAS(I_APPEARANCE_UFO, I_HI_D6)
	TTL_INPUT(I_HI_D7, 0)
	NET_C(I_HI_D7, IC42.1)
	ALIAS(I_BLACK_HOLE, IC42.2)

	NET_C(GND, I_HI_D0.GND, I_HI_D1.GND, I_HI_D3.GND, I_HI_D6.GND, I_HI_D7.GND)
	NET_C(I_V5, I_HI_D0.VCC, I_HI_D1.VCC, I_HI_D3.VCC, I_HI_D6.VCC, I_HI_D7.VCC)

	ANALOG_INPUT(I_V5, 5)
	ANALOG_INPUT(I_V6, 6)
	ANALOG_INPUT(I_V12, 12)
	ANALOG_INPUT(I_VM12, -12)

	RES(R1, RES_K(120))
	RES(R2, RES_K(56))
	RES(R3, RES_K(47))
	RES(R4, RES_K(56))
	RES(R5, RES_K(33))
	RES(R6, RES_K(120))
	RES(R7, RES_K(100))
	RES(R8, RES_K(56))
	RES(R9, RES_K(47))
	RES(R10, RES_K(5.6))
	RES(R11, RES_K(100))
	RES(R12, RES_K(100))
	RES(R13, RES_K(5.6))
//	RES(R14, RES_K(47))		-- part of MN3101 clock circuit, simulated
//	RES(R15, RES_K(16))		-- part of MN3101 clock circuit, simulated
	RES(R16, RES_K(120))
	RES(R17, RES_K(220))
	RES(R18, RES_K(10))
	RES(R19, RES_K(3.3))
	RES(R20, RES_K(10))
	RES(R21, RES_K(220))
	RES(R22, RES_K(120))
	RES(R23, RES_K(5.6))
	RES(R24, RES_K(12))
	RES(R25, RES_K(5.1))
	RES(R26, RES_K(33))
	RES(R27, RES_K(120))
	RES(R28, RES_K(39))
	RES(R29, RES_K(39))
	RES(R30, RES_K(22))
	RES(R31, RES_K(51))
	RES(R32, RES_K(5.6))
	RES(R33, RES_K(10))
	RES(R34, RES_K(4.7))
	RES(R35, RES_K(10))
//	RES(R36, RES_K(10))		-- part of final amp (not emulated)
//	RES(R37, RES_K(22))		-- part of final amp (not emulated)
	RES(R38, RES_K(10))
	RES(R39, RES_K(10))
	RES(R40, RES_K(10))
	RES(R41, RES_K(10))
	RES(R42, RES_K(3.3))
	RES(R43, RES_K(8.2))
	RES(R44, RES_K(3.3))
	RES(R45, RES_K(330))
	RES(R46, RES_K(100))
	RES(R47, RES_K(100))
	RES(R48, RES_K(10))
	RES(R49, RES_K(15))
	RES(R50, RES_K(15))
	RES(R51, RES_K(15))
	RES(R52, RES_K(15))
	RES(R53, RES_K(150))
	RES(R54, RES_K(150))
	RES(R55, RES_K(100))
	RES(R56, RES_K(100))
	RES(R57, RES_K(33))
	RES(R58, RES_K(33))
	RES(R59, RES_K(220))
	RES(R60, RES_K(39))
	RES(R61, RES_K(10))
	RES(R62, RES_K(10))
	RES(R63, RES_K(8.2))
	RES(R64, RES_K(51))
	RES(R65, RES_K(33))
	RES(R66, RES_K(10))
	RES(R67, RES_K(2.2))
	RES(R68, RES_K(15))
	RES(R69, RES_K(51))
	RES(R70, RES_K(100))
	RES(R71, RES_M(1))
	RES(R72, RES_K(220))
	RES(R73, RES_K(51))
	RES(R74, RES_K(33))
	RES(R75, RES_K(10))
	RES(R76, RES_K(1))
	RES(R77, RES_K(33))
	RES(R78, RES_K(30))
	RES(R79, RES_K(33))
	RES(R80, RES_K(51))
	RES(R81, RES_K(33))
	RES(R82, RES_K(51))
	RES(R83, RES_K(15))
	RES(R84, RES_K(33))
	RES(R85, RES_K(51))
	RES(R86, RES_K(15))
	RES(R87, RES_K(100))
	RES(R88, RES_K(100))
	RES(R89, RES_K(10))
	RES(R90, RES_K(10))
	RES(R91, RES_K(2.2))
	RES(R92, RES_K(22))
	RES(R93, RES_M(1))
	RES(R94, RES_K(33))
	RES(R95, RES_K(30))
	RES(R96, RES_K(51))
	RES(R97, RES_K(51))
	RES(R98, RES_K(51))
	RES(R99, RES_K(51))
	RES(R100, RES_K(3.3))
	RES(R101, RES_K(51))
	RES(R102, RES_K(51))
	RES(R103, RES_K(15))
	RES(R104, RES_K(100))
	RES(R105, RES_K(100))
	RES(R106, RES_K(10))
	RES(R107, RES_K(10))
	RES(R108, RES_K(2.2))
	RES(R109, RES_K(2.2))
	RES(R110, RES_K(33))
	RES(R111, RES_K(30))
	RES(R112, RES_K(51))
	RES(R113, RES_K(51))
	RES(R114, RES_K(51))
	RES(R115, RES_K(51))
	RES(R116, RES_K(15))
	RES(R117, RES_K(51))
	RES(R118, RES_K(51))
	RES(R119, RES_K(15))
	RES(R120, RES_K(100))
	RES(R121, RES_K(100))
	RES(R122, RES_K(10))
	RES(R123, RES_K(10))
	RES(R124, RES_K(2.2))
	RES(R125, RES_K(2.2))
	RES(R126, RES_K(30))
	RES(R127, RES_K(30))
	RES(R128, RES_K(51))
	RES(R129, RES_K(51))
	RES(R130, RES_K(51))
	RES(R131, RES_K(51))
	RES(R132, RES_K(15))
	RES(R133, RES_K(51))
	RES(R134, RES_K(51))
	RES(R135, RES_K(2.2))
	RES(R136, RES_K(100))
	RES(R137, RES_K(100))
	RES(R138, RES_K(10))
	RES(R139, RES_K(10))
	RES(R140, RES_K(2.2))
	RES(R141, RES_K(2.2))
	RES(R142, RES_K(10))
	RES(R143, RES_K(8.2))
	RES(R144, RES_K(10))
	RES(R145, RES_K(2.7))
	RES(R146, 820)
	RES(R147, RES_K(220))
	RES(R148, RES_K(220))
	RES(R149, RES_M(2.2))
	RES(R150, RES_K(330))
	RES(R151, RES_K(33))
	RES(R152, RES_M(3.3))
	RES(R153, 470)
	RES(R154, RES_K(10))
	RES(R155, RES_K(15))
	RES(R156, RES_K(30))
	RES(R157, RES_K(100))
	RES(R158, RES_K(120))
	RES(R159, RES_M(1.5))
	RES(R160, RES_K(220))
	RES(R161, RES_M(2.2))
	RES(R162, RES_K(4.7))
	RES(R163, RES_K(4.7))
	RES(R166, RES_K(150))
	RES(R167, RES_K(39))
	RES(R168, RES_K(4.7))
	RES(R169, RES_K(4.7))
	RES(R170, RES_K(33))
	RES(R171, RES_K(270))
	RES(R172, RES_M(1))
	RES(R173, RES_K(5.6))
	RES(R174, RES_K(56))
	RES(R175, RES_M(1))
	RES(R176, RES_M(2.2))
	RES(R177, RES_K(4.7))
	RES(R178, RES_K(1.2))
	RES(R179, RES_K(15))
	RES(R180, RES_K(30))
	RES(R181, RES_K(2.2))
	RES(R182, RES_K(51))
	RES(R183, RES_K(51))
	RES(R184, RES_K(10))
	RES(R185, RES_K(51))
	RES(R186, RES_K(100))
	RES(R187, RES_K(22))
	RES(R188, RES_K(22))
	RES(R189, RES_K(4.7))
	RES(R190, RES_K(51))
	RES(R191, RES_K(10))
	RES(R192, RES_K(51))
	RES(R193, RES_K(470))
	RES(R194, RES_K(15))
	RES(R195, RES_K(1))
	RES(R196, RES_M(1))
	RES(R197, RES_M(1))
	RES(R198, RES_K(10))
	RES(R199, RES_K(1))
	RES(R200, RES_K(470))
	RES(R201, RES_K(470))
	RES(R202, RES_K(1))
	RES(R203, RES_M(1))
	RES(R204, RES_M(1))
	RES(R205, RES_K(470))
	RES(R206, RES_K(470))
	RES(R207, 470)
	RES(R208, 470)
	RES(R209, RES_K(1))
	RES(R210, RES_K(1))
	RES(R211, RES_K(100))
	RES(R212, RES_K(56))
	RES(R213, RES_K(15))
	RES(R214, RES_K(27))
	RES(R215, RES_K(10))
	RES(R216, RES_K(68))
	RES(R217, RES_K(100))
	RES(R218, RES_K(100))
	RES(R219, RES_K(36))
	RES(R220, RES_K(15))
	RES(R221, RES_K(15))
	RES(R222, RES_K(39))
	RES(R224, RES_K(15))
//	RES(R226, RES_K(1))
//	RES(R227, RES_K(1))
	RES(R228, RES_K(1))
	RES(R229, RES_K(1))
	RES(R230, RES_K(1))
	RES(R231, RES_M(1))
	RES(R232, RES_K(470))
	RES(R233, RES_K(1))
	RES(R234, RES_K(1))
	RES(R235, RES_K(12))
	RES(R236, RES_K(36))
	RES(R237, 100)
	RES(R238, RES_K(1))
	RES(R239, RES_K(1))
	RES(R240, RES_K(33))
	RES(R241, RES_K(47))
	RES(R242, RES_K(1))
	RES(R243, RES_K(47))
	RES(R244, RES_K(47))
	RES(R245, RES_K(1))
	RES(R246, RES_K(1))
	RES(R247, RES_K(2.2))
	RES(R248, RES_K(15))
	RES(R249, RES_K(33))
	RES(R250, RES_K(1))
	RES(R251, 560)
	RES(R252, RES_K(3.3))
	POT(R253, RES_K(100))

	CAP(C1, CAP_P(3300))
	CAP(C2, CAP_P(3300))
	CAP(C3, CAP_P(220))
	CAP(C4, CAP_P(3300))
	CAP(C5, CAP_P(220))
	CAP(C6, CAP_U(22))
	CAP(C7, CAP_U(3.3))
//	CAP(C8, CAP_P(1000))		-- part of MN3101 clock circuit, simulated
	CAP(C9, CAP_U(3.3))
	CAP(C10, CAP_U(3.3))
	CAP(C11, CAP_U(2.2))
	CAP(C12, CAP_U(3.3))
	CAP(C13, CAP_U(3.3))
	CAP(C14, CAP_P(220))
	CAP(C15, CAP_P(2200))
	CAP(C16, CAP_P(3300))
	CAP(C17, CAP_P(2200))
	CAP(C18, CAP_P(1000))
	CAP(C19, CAP_U(3.3))
	CAP(C20, CAP_U(2.2))
//	CAP(C21, CAP_U(10))		-- part of final amp (not emulated)
	CAP(C22, CAP_U(2.2))
	CAP(C23, CAP_U(2.2))
	CAP(C24, CAP_U(2.2))
	CAP(C25, CAP_U(2.2))
	CAP(C26, CAP_U(0.047))
	CAP(C27, CAP_U(0.047))
	CAP(C28, CAP_U(0.022))
	CAP(C29, CAP_U(0.022))
	CAP(C30, CAP_U(22))
	CAP(C31, CAP_U(2.2))
	CAP(C32, CAP_U(2.2))
	CAP(C34, CAP_U(4.7))
	CAP(C35, CAP_U(4.7))	// duplicate C35 renamed to C99
	CAP(C36, CAP_U(2.2))
	CAP(C37, CAP_U(2.2))
	CAP(C40, CAP_U(2.2))
	CAP(C41, CAP_P(680))
	CAP(C42, CAP_U(2.2))
	CAP(C43, CAP_U(0.01))
	CAP(C44, CAP_U(2.2))
	CAP(C45, CAP_U(22))
	CAP(C46, CAP_P(680))
	CAP(C47, CAP_U(22))
	CAP(C48, CAP_P(680))
	CAP(C49, CAP_U(2.2))
	CAP(C50, CAP_U(4.7))
	CAP(C51, CAP_U(2.2))
	CAP(C52, CAP_P(680))
	CAP(C53, CAP_U(4.7))
	CAP(C54, CAP_P(680))
	CAP(C55, CAP_U(0.01))
	CAP(C56, CAP_U(2.2))
	CAP(C57, CAP_U(2.2))
	CAP(C58, CAP_P(1000))
	CAP(C59, CAP_P(4700))
	CAP(C60, CAP_U(0.033))
	CAP(C61, CAP_P(6800))
	CAP(C62, CAP_P(2200))
	CAP(C63, CAP_U(0.01))	// duplicate C63 renamed to C101
	CAP(C64, CAP_U(0.01))
	CAP(C65, CAP_U(3.3))
	CAP(C66, CAP_U(3.3))
	CAP(C67, CAP_U(3.3))
	CAP(C68, CAP_U(15))
	CAP(C70, CAP_U(4.7))
	CAP(C71, CAP_U(1))
	CAP(C72, CAP_U(0.047))
	CAP(C73, CAP_U(4.7))
	CAP(C74, CAP_U(0.68))
	CAP(C75, CAP_U(0.068))
	CAP(C76, CAP_U(2.2))
	CAP(C78, CAP_U(1))
	CAP(C79, CAP_U(1))
	CAP(C80, CAP_U(2.2))
	CAP(C81, CAP_U(47))
	CAP(C82, CAP_U(0.68))
	CAP(C83, CAP_U(1))
	CAP(C84, CAP_U(0.01))
	CAP(C85, CAP_P(100))
	CAP(C86, CAP_U(1))
	CAP(C87, CAP_U(3.3))
	CAP(C88, CAP_U(10))
	CAP(C89, CAP_U(10))
	CAP(C90, CAP_U(10))
	CAP(C91, CAP_U(2.2))
	CAP(C92, CAP_U(4.7))
	CAP(C93, CAP_U(2.2))
	CAP(C94, CAP_U(22))
	CAP(C95, CAP_P(680))
	CAP(C96, CAP_U(2.2))
	CAP(C97, CAP_U(22))
	CAP(C98, CAP_U(0.1))
	CAP(C99, CAP_P(680))
	CAP(C100, CAP_U(1))
	CAP(C101, CAP_P(680))

//	D_MA150(D1)		-- part of MN3101 clock circuit, simulated
//	D_MA150(D2)		-- part of MN3101 clock circuit, simulated
	D_MA150(D3)
	D_MA150(D4)
	D_MA150(D5)
	D_MA150(D6)
	D_MA150(D7)
	D_MA150(D8)
	D_MA150(D9)
	D_MA150(D10)
	D_MA150(D11)
	D_MA150(D12)
	D_MA150(D13)
	D_MA150(D14)
	D_MA150(D15)
	D_MA150(D16)
	D_MA150(D17)
	D_MA150(D18)
	D_MA150(D19)
	D_MA150(D20)

	Q_C458(TR1)
	Q_C458(TR2)
	Q_C458(TR3)
	Q_C458(TR4)
	Q_C458(TR5)
	Q_C458(TR6)
	Q_C458(TR7)
	Q_C458(TR8)
	Q_C458(TR9)
	Q_C458(TR10)

	AN6551_SIL(IC1)			// Op. Amp.
	NET_C(IC1.1, I_V12)
	NET_C(IC1.5, GND)
	NET_C(IC1.9, I_V12)

	MN3005_DIP(IC2)			// 4096-stage BBD

//	MN3101_DIP(IC3)			// clock for BBD; fixed frequency

	S2688_DIP(IC4)			// Noise generator

	AN6551_SIL(IC5)			// Op. Amp.
	NET_C(IC5.1, I_V12)
	NET_C(IC5.5, GND)
	NET_C(IC5.9, I_V12)

	// IC6?

	LM324_DIP(IC7)			// Op. Amp.
	NET_C(IC7.4, I_V12)
	NET_C(IC7.11, I_VM12)

	LM324_DIP(IC8)			// Op. Amp.
	NET_C(IC8.4, I_V12)
	NET_C(IC8.11, I_VM12)

	MB4391_DIP(IC9)			// Sega custom
	NET_C(IC9.3, IC9.7, GND)
	NET_C(IC9.12, IC9.16, I_V12) // guess

	MB4391_DIP(IC10)		// Sega custom
	NET_C(IC10.3, IC10.7, GND)
	NET_C(IC10.12, IC10.16, I_V12) // guess

	MB4391_DIP(IC11)		// Sega custom
	NET_C(IC11.3, IC11.7, GND)
	NET_C(IC11.12, IC11.16, I_V12) // guess

	MB4391_DIP(IC12)		// Sega custom
	NET_C(IC12.3, IC12.7, GND)
	NET_C(IC12.12, IC12.16, I_V12) // guess

	LM324_DIP(IC13)			// Op. Amp.
	NET_C(IC13.4, I_V12)
	NET_C(IC13.11, I_VM12)

	CD4016_DIP(IC14)		// Quad Bilateral Switch
	NET_C(IC14.7, GND)
	NET_C(IC14.14, I_V12)

	LM324_DIP(IC15)			// Op. Amp.
	NET_C(IC15.4, I_V12)
	NET_C(IC15.11, I_VM12)

	LM324_DIP(IC16)			// Op. Amp.
	NET_C(IC16.4, I_V12)
	NET_C(IC16.11, I_VM12)

	LM324_DIP(IC17)			// Op. Amp.
	NET_C(IC17.4, I_V12)
	NET_C(IC17.11, I_VM12)

	LM324_DIP(IC18)			// Op. Amp.
	NET_C(IC18.4, I_V12)
	NET_C(IC18.11, I_VM12)

	NE555_DIP(IC19)			// Timer

	// IC20?

	LM324_DIP(IC21)			// Op. Amp.
	NET_C(IC21.4, I_V12)
	NET_C(IC21.11, I_VM12)

	// IC22?

	LM324_DIP(IC23)			// Op. Amp.
	NET_C(IC23.4, I_V12)
	NET_C(IC23.11, I_VM12)

	LM324_DIP(IC24)			// Op. Amp.
	NET_C(IC24.4, I_V12)
	NET_C(IC24.11, I_VM12)

	LM324_DIP(IC25)			// Op. Amp.
	NET_C(IC25.4, I_V12)
	NET_C(IC25.11, I_VM12)

	LM324_DIP(IC26)			// Op. Amp.
	NET_C(IC26.4, I_V12)
	NET_C(IC26.11, I_VM12)

	LM324_DIP(IC27)			// Op. Amp.
	NET_C(IC27.4, I_V12)
	NET_C(IC27.11, I_VM12)

	// IC28?

	LM324_DIP(IC29)			// Op. Amp.
	NET_C(IC29.4, I_V12)
	NET_C(IC29.11, I_VM12)

	TTL_74393_DIP(IC30)		// Dual 4-Stage Binary Counter
	NET_C(IC30.7, GND)
	NET_C(IC30.14, I_V5)

	TTL_7404_DIP(IC31)		// Inverter -- part number not explicitly given

	TTL_7400_DIP(IC32)		// NAND gate -- part number not explicitly given

	NE555_DIP(IC33)			// Timer

	TTL_74123_DIP(IC34)		// Dual Retriggerable One-Shot with Clear and Complementary Outputs
	NET_C(IC34.8, GND)
	NET_C(IC34.16, I_V5)

	TTL_74123_DIP(IC35)		// Dual Retriggerable One-Shot with Clear and Complementary Outputs
	NET_C(IC35.8, GND)
	NET_C(IC35.16, I_V5)

	// IC36?

	TTL_74123_DIP(IC37)		// Dual Retriggerable One-Shot with Clear and Complementary Outputs
	NET_C(IC37.8, GND)
	NET_C(IC37.16, I_V5)

	TTL_74123_DIP(IC38)		// Dual Retriggerable One-Shot with Clear and Complementary Outputs
	NET_C(IC38.8, GND)
	NET_C(IC38.16, I_V5)

//	TTL_74LS30_DIP(IC39)
//	NET_C(IC39.7, GND)
//	NET_C(IC39.14, I_V5)

	// IC40?

	// IC41?

	TTL_74LS04_DIP(IC42)     // Hex Inverting Gates
	NET_C(IC42.7, GND)
	NET_C(IC42.14, I_V5)

//	TTL_74LS377_DIP(IC43)	// Octal D flip-flop
//	NET_C(IC43.10, GND)
//	NET_C(IC43.20, I_V5)

//	TTL_74LS377_DIP(IC44)	// Octal D flip-flop
//	NET_C(IC44.10, GND)
//	NET_C(IC44.20, I_V5)

//	TTL_74LS138_DIP(IC45)	// 1-of-8 Decoder/Demultiplexer
//	NET_C(IC45.8, GND)
//	NET_C(IC45.16, I_V5)

	//
	// Sheet 1, top (D-BOMB SOUND)
	//

	NET_C(I_D_BOMB, R245.1, IC37.9)
	NET_C(R245.2, I_V5, R244.1, IC37.10, IC37.11)
	NET_C(R244.2, C90.1, IC37.7)
	NET_C(C90.2, IC37.6)
	NET_C(IC37.12, R234.1, R198.1)
	NET_C(IC37.5, R228.1, D20.A)
	NET_C(R228.2, I_V5)
	NET_C(D20.K, R150.2, C70.1, IC21.5)
	NET_C(R150.1, GND)
	NET_C(C70.2, GND)
	NET_C(IC21.6, IC21.7, R154.1)
	NET_C(R154.2, IC21.10)
	NET_C(IC21.9, R95.1, IC21.8, R97.1)
	NET_C(R95.2, C61.1, IC16.9, R103.2)
	NET_C(R97.2, R99.2, IC16.10)
	NET_C(R99.1, GND)
	NET_C(C61.2, IC16.8, IC16.6, R66.1)
	NET_C(R103.1, TR4.C)
	NET_C(TR4.E, GND)
	NET_C(TR4.B, R109.2, D6.K)
	NET_C(R109.1, GND)
	NET_C(D6.A, R107.1)
	NET_C(IC16.5, R102.2, R105.1)
	NET_C(R102.1, I_V6)
	NET_C(R105.2, R107.2, IC16.7)
	NET_C(R66.2, R67.2, C49.2)
	NET_C(R67.1, GND)
	NET_C(C49.1, IC12.1)
	NET_C(R234.2, I_V5)
	NET_C(R198.2, D16.K)
	NET_C(D16.A, C78.1, R196.1)
	NET_C(C78.2, GND)
	NET_C(R196.2, R197.1, IC27.12)
	NET_C(R197.2, I_V5)
	NET_C(IC27.13, IC27.14, IC12.2)
	NET_C(IC12.14, C52.2)
	NET_C(C52.1, GND)
	NET_C(IC12.15, C51.1)
	NET_C(C51.2, R32.1)
	ALIAS(D_BOMB_SOUND, R32.2)

	//
	// Sheet 1, upper-middle (BRD_IN)
	//

	NET_C(BBD_IN, C9.1)
	NET_C(C9.2, R16.1)
	NET_C(R16.2, C1.2, R1.1, R3.1, R17.1)
	NET_C(C1.1, GND)
	NET_C(R1.2, C3.2, IC1.2, R2.1)
	NET_C(R3.2, C3.1, IC1.3)
	NET_C(I_V12, R7.2)
	NET_C(R7.1, IC1.4, C6.1, IC1.6, IC5.4, IC5.6, R8.1)
	NET_C(C6.2, GND)
	NET_C(R8.2, R253.3)
	NET_C(R253.1, GND)
	NET_C(R2.2, C2.2, R4.1)
	NET_C(C2.1, GND)
	NET_C(R4.2, C4.2, R5.1, R6.1)
	NET_C(C4.1, GND)
	NET_C(R6.2, C5.2, IC1.8, IC2.7)
	NET_C(R5.2, C5.1, IC1.7)
	NET_C(R17.2, C10.2)
	NET_C(C10.1, IC5.2, R21.1)
	NET_C(R21.2, IC5.3, R22.1)
	NET_C(R22.2, C12.1)
	NET_C(C12.2, R23.2, R24.1)
	NET_C(R23.1, GND)
	NET_C(IC2.1, I_V12)
	NET_C(IC2.5, GND)
	NET_C(IC2.4, R11.2, R10.1)
	NET_C(R11.1, R12.1, I_VM12)
	NET_C(R12.2, IC2.3, R13.1)
	NET_C(R13.2, R10.2, C7.2)
#if 1
	// Just use a fixed clock for the MN3101. The MN3101 is a
	// 2-oscillator clock, with inputs:
	//
	//    R1=47K, R2=16K, C=1000pF
	//
	// Equation not documented in the datasheet, but online says:
	//
	//    freq = 1 / (2*C * (0.405 * Req + 0.693 * R1)), where
	//
	//    Req = (R1 * R2) / (R1 + R2)
	//
	// So Req here = 11936.5, and freq = 13367Hz. The output
	// clock is half that, so 6683.5. CP1 and CP2 are inverted
	// phases, so run the ouput through an inverter to generate
	// the other one.
	//
	// The MN3101 also should take -15V in and outut -14V to the
	// downstream chip, so simulate that with a straight source.
	CLOCK(MN3101, 6683.5)
	NET_C(MN3101.GND, GND)
	NET_C(MN3101.VCC, I_V12)
	NET_C(MN3101.Q, MN3101_INV.A, IC2.6)
	TTL_7404_GATE(MN3101_INV)
	NET_C(MN3101_INV.Q, IC2.2)
	ANALOG_INPUT(I_VM14, -14)
	NET_C(I_VM14, IC2.8)
#else
	NET_C(IC2.8, IC3.8)
	NET_C(IC2.6, IC3.2)
	NET_C(IC2.2, IC3.4)
	NET_C(IC3.1, D2.K)
	NET_C(D2.A, D1.K)
	NET_C(D1.A, I_V12)
	NET_C(IC3.5, C8.1)
	NET_C(IC3.6, R15.1)
	NET_C(IC3.7, R14.1)
	NET_C(IC3.3, GND)
	NET_C(C8.2, R15.2, R14.2)
#endif
	NET_C(C7.1, R9.1)
	NET_C(R9.2, C17.2, R29.1)
	NET_C(C17.1, GND)
	NET_C(R29.2, C15.2, R28.1)
	NET_C(C15.1, GND)
	NET_C(R28.2, C16.2, R26.1, R27.1)
	NET_C(C16.1, GND)
	NET_C(R27.2, C14.2, IC5.8, C13.1)
	NET_C(R26.2, C14.1, IC5.7)
	NET_C(C13.2, C11.2, R24.2)
	NET_C(C11.1, R25.1)
	ALIAS(BBD_OUT, R25.2)

	//
	// Sheet 1, bottom-middle (BONUS_UP)
	//

	NET_C(I_BONUS_UP, R239.1, IC35.1)
	NET_C(R239.2, I_V5, R240.1, IC35.2, IC35.3)
	NET_C(R240.2, C87.1, IC35.15)
	NET_C(C87.2, IC35.14)
	NET_C(IC35.13, IC32.1)
	NET_C(I_V5, R235.1, IC34.2, IC34.3)
	NET_C(IC34.1, R237.1, C85.2)
	NET_C(C85.1, GND)
	NET_C(R237.2, IC34.13)
	NET_C(R235.2, IC34.15, C84.1)
	NET_C(C84.2, IC34.14)
	NET_C(IC34.4, IC30.1)
	NET_C(IC30.2, GND)
	NET_C(IC30.5, IC32.2)
	NET_C(IC32.3, R230.1, R40.1)
	NET_C(R230.2, I_V5)
	NET_C(R40.2, R41.2, C20.2)
	NET_C(R41.1, GND)
	NET_C(C20.1, R39.1)
	NET_C(R39.2, IC7.6, R38.1)
	NET_C(IC7.5, I_V6)
	NET_C(R38.2, IC7.7, C19.1)
	NET_C(C19.2, R35.1)
	NET_C(R35.2, C18.2, R34.1)
	NET_C(C18.1, GND)
	ALIAS(BONUS_UP_SOUND, R34.2)

	//
	// Sheet 1, bottom (ACCELERATE/BLACK_HOLE/BACK_G)
	//

	NET_C(I_ACCELERATE, IC31.3)
	NET_C(IC31.4, R229.1, R160.1, R159.2, C71.1)
	NET_C(R229.2, I_V5)
	NET_C(I_BLACK_HOLE, IC31.11)
	NET_C(IC31.10, D12.K)
	NET_C(D12.A, R159.1)
	NET_C(I_BACK_G, IC31.1)
	NET_C(IC31.2, R76.1, IC14.6)
	NET_C(R76.2, I_V12)
	NET_C(C71.2, GND)
	NET_C(R160.2, IC23.5, R161.1)
	NET_C(R161.2, I_V12)
	NET_C(IC23.6, IC23.7, R129.1, R127.1, R158.1)
	NET_C(R129.2, R131.2, IC18.10)
	NET_C(R131.1, GND)
	NET_C(R127.2, C66.1, IC18.9, R135.2)
	NET_C(R135.1, TR7.C)
	NET_C(TR7.E, GND)
	NET_C(TR7.B, D10.K, R141.1)
	NET_C(R141.2, GND)
	NET_C(D10.A, R139.1)
	NET_C(R139.2, R137.2, IC18.7)
	NET_C(R137.1, IC18.5, R134.2)
	NET_C(R134.1, I_V6)
	NET_C(IC18.6, IC18.8, C65.1, R156.1)
	NET_C(C65.2, C66.2)
	NET_C(R158.2, R157.2, IC23.3)
	NET_C(R157.1, GND)
	NET_C(IC23.2, IC23.1, IC23.12)
	NET_C(IC23.13, R156.2, R155.1)
	NET_C(R155.2, IC23.14, R130.1, R126.1)
	NET_C(R126.2, R132.2, IC18.13, C64.1)
	NET_C(R130.2, R128.2, IC18.12)
	NET_C(R128.1, GND)
	NET_C(C64.2, IC18.14, IC18.2)
	NET_C(IC18.3, R133.2, R136.1, IC23.10)
	NET_C(R133.1, I_V6)
	NET_C(R136.2, IC18.1, R138.2)
	NET_C(R138.1, D9.A)
	NET_C(D9.K, R140.2, TR8.B)
	NET_C(R140.1, GND)
	NET_C(TR8.E, GND)
	NET_C(TR8.C, R132.1)
	NET_C(IC23.9, IC23.8, C57.1)
	NET_C(C57.2, IC14.8)
	NET_C(IC14.9, R75.1, R43.1)
	NET_C(R75.2, I_V12)
	NET_C(R43.2, R44.2, R42.1)
	NET_C(R44.1, GND)
	ALIAS(BBD_IN, R42.2)

	//
	// Sheet 2, top (WARP)
	//

	NET_C(I_WARP, R250.1, IC38.9)
	NET_C(R250.2, I_V5, R249.1, IC38.10, IC38.11)
	NET_C(R249.2, IC38.7, C92.1)
	NET_C(C92.2, IC38.6)
	NET_C(IC38.12, D11.K, R247.1)
	NET_C(R247.2, I_V5)
	NET_C(D11.A, R153.1)
	NET_C(R153.2, R151.1, R152.2, C93.1)
	NET_C(C93.2, GND)
	NET_C(R152.1, GND)
	NET_C(R151.2, R149.2, IC21.3)
	NET_C(R149.1, I_V12)
	NET_C(IC21.2, IC21.1, R147.1, IC12.6)
	NET_C(R147.2, R148.2, IC21.12)
	NET_C(R148.1, GND)
	NET_C(IC21.13, IC21.14, R110.1, R114.1, R113.1, R111.1)
	NET_C(R110.2, C62.1, IC17.13, R116.2)
	NET_C(R114.2, R112.2, IC17.12)
	NET_C(R112.1, GND)
	NET_C(C62.2, IC17.14, IC17.2, IC13.2, R68.1)
	NET_C(R116.1, TR5.C)
	NET_C(TR5.E, GND)
	NET_C(TR5.B, R124.2, D7.K)
	NET_C(R124.1, GND)
	NET_C(D7.A, R122.1)
	NET_C(R122.2, R120.2, IC17.1)
	NET_C(R120.1, IC17.3, R117.2)
	NET_C(R117.1, I_V6)
	NET_C(IC13.3, R69.2)
	NET_C(R69.1, C63.2, IC17.8, IC17.6)
	NET_C(R111.2, C63.1, IC17.9, R119.2)
	NET_C(R113.2, R115.2, IC17.10)
	NET_C(R115.1, GND)
	NET_C(IC17.5, R118.2, R121.1)
	NET_C(R118.1, I_V6)
	NET_C(R121.2, IC17.7, R123.2)
	NET_C(R123.1, D8.A)
	NET_C(D8.K, R125.2, TR6.B)
	NET_C(R125.1, GND)
	NET_C(TR6.E, GND)
	NET_C(TR6.C, R119.1)
	NET_C(IC13.1, R70.1)
	NET_C(R70.2, IC13.6)
	NET_C(IC13.5, I_V6)
	NET_C(IC13.7, R74.1)
	NET_C(R74.2, IC13.9, R73.1, R68.2)
	NET_C(IC13.10, I_V6)
	NET_C(IC13.8, R73.2, C56.2)
	NET_C(C56.1, R72.1)
	NET_C(R72.2, R71.1, C55.1, IC13.13)
	NET_C(IC13.12, I_V6)
	NET_C(IC13.14, C55.2, R71.2, IC7.3)
	NET_C(IC7.2, IC7.1, C50.2)
	NET_C(C50.1, IC12.5)
	NET_C(IC12.10, C54.2)
	NET_C(C54.1, GND)
	NET_C(IC12.11, C53.1)
	NET_C(C53.2, R33.1)
	NET_C(R33.2, BBD_IN, R62.2)

	//
	// Sheet 2, top-middle (SHOT)
	//

	NET_C(I_SHOT, R246.1, IC38.1)
	NET_C(R246.2, I_V5, IC38.2, IC38.3, R248.1)
	NET_C(R248.2, IC38.15, C91.1)
	NET_C(C91.2, IC38.14)
	NET_C(IC38.4, R251.1)
	NET_C(R251.2, D14.K, C72.1, R252.1)
	NET_C(R252.2, I_V5)
	NET_C(D14.A, R176.2, C74.1, IC25.5, R175.1)
	NET_C(IC25.6, IC25.7, IC10.2)
	NET_C(R176.1, GND)
	NET_C(C74.2, GND)
	NET_C(C72.2, R175.2, IC25.10, R172.1)
	NET_C(R172.2, R171.1)
	NET_C(R171.2, I_V12, R142.2, IC19.4, IC19.8, C94.2)
	NET_C(C94.1, GND)
	NET_C(IC25.9, IC25.8, R173.1)
	NET_C(R173.2, IC25.13, R170.1)
	NET_C(IC25.12, I_V6)
	NET_C(R170.2, IC25.14, IC19.5, R143.1)
	NET_C(IC19.2, IC19.6, C67.1, R144.1)
	NET_C(C67.2, GND)
	NET_C(R144.2, IC19.7, R142.1)
	NET_C(IC19.3, R145.1)
	NET_C(IC19.1, GND)
	NET_C(R145.2, R143.2, R146.2, C68.1, R79.1, R77.1)
	NET_C(R146.1, GND)
	NET_C(C68.2, GND)
	NET_C(R79.2, R81.2, IC15.12)
	NET_C(R81.1, GND)
	NET_C(R77.2, IC15.13, R83.2, C58.2)
	NET_C(R83.1, TR1.C)
	NET_C(TR1.E, GND)
	NET_C(TR1.B, R91.2, D3.K)
	NET_C(R91.1, GND)
	NET_C(D3.A, R89.1)
	NET_C(R89.2, R87.2, R93.1, IC15.1)
	NET_C(R87.1, R84.2, IC15.3)
	NET_C(R84.1, I_V6)
	NET_C(C58.1, IC15.14, IC15.2)
	NET_C(R93.2, R59.2, C36.2)
	NET_C(R59.1, GND)
	NET_C(C36.1, IC10.1)
	NET_C(IC10.14, C95.2)
	NET_C(C95.1, GND)
	NET_C(IC10.15, C35.1)
	NET_C(C35.2, R62.1, R20.1)
	ALIAS(SHOT_SOUND, R20.2)

	//
	// Sheet 2, bottom-middle (SHORT_EXP)
	//

	NET_C(I_SHORT_EXP, R238.1, IC34.9)
	NET_C(R238.2, I_V5, R236.1, IC34.10, IC34.11)
	NET_C(R236.2, IC34.7, C86.1)
	NET_C(C86.2, IC34.6)
	NET_C(IC34.12, R233.1, D17.K)
	NET_C(R233.2, I_V5)
	NET_C(D17.A, R199.1)
	NET_C(R199.2, C96.2, R200.1)
	NET_C(C96.1, GND)
	NET_C(R200.2, IC27.10, R201.1)
	NET_C(R201.2, I_V5)
	NET_C(IC27.9, IC27.8, IC9.2)
	NET_C(I_V12, C97.1, C98.1, IC4.4)
	NET_C(C97.2, GND, C98.2, IC4.1, IC4.2)
	NET_C(IC4.3, C23.1, C22.1)
	NET_C(C23.2, R46.1)
	NET_C(R46.2, IC8.9, R48.1)
	NET_C(IC8.10, I_V6)
	NET_C(R48.2, IC8.8, C25.1)
	NET_C(C25.2, R50.1)
	NET_C(R50.2, R52.1, C29.1)
	NET_C(R52.2, C28.2, IC8.5)
	NET_C(C28.1, GND)
	NET_C(I_V6, R56.1)
	NET_C(R56.2, IC8.6, R54.1)
	NET_C(R54.2, IC8.7, C30.1, C29.2)
	NET_C(C30.2, IC9.1)
	NET_C(IC9.14, C101.2)
	NET_C(C101.1, GND)
	NET_C(IC9.15, C32.1)
	NET_C(C32.2, R18.1)
	ALIAS(S_EXP_SOUND, R18.2)

	//
	// Sheet 2, bottom (LONG_EXP)
	//

	NET_C(I_LONG_EXP, R209.1, IC37.1)
	NET_C(R209.2, I_V5, R243.1, IC37.2, IC37.3)
	NET_C(R243.2, IC37.15, C89.1)
	NET_C(C89.2, IC37.14)
	NET_C(IC37.4, D19.K, R210.1)
	NET_C(R210.2, I_V5, R203.1)
	NET_C(R203.2, R204.2, IC27.5)
	NET_C(D19.A, R208.1)
	NET_C(R208.2, C80.1, R204.1)
	NET_C(C80.2, GND)
	NET_C(IC27.6, IC27.7, IC9.6)
	NET_C(C22.2, R45.1)
	NET_C(R45.2, IC8.13, R47.1)
	NET_C(IC8.12, I_V6)
	NET_C(R47.2, IC8.14, C24.1)
	NET_C(C24.2, R49.1)
	NET_C(R49.2, R51.1, C26.1)
	NET_C(R51.2, C27.2, IC8.3)
	NET_C(C27.1, GND)
	NET_C(I_V6, R55.1)
	NET_C(R55.2, IC8.2, R53.1)
	NET_C(R53.2, IC8.1, R57.1, C26.2)
	NET_C(R57.2, R58.2, C31.1)
	NET_C(R58.1, GND)
	NET_C(C31.2, IC9.5)
	NET_C(IC9.10, C99.2)
	NET_C(C99.1, GND)
	NET_C(IC9.11, C34.1)
	NET_C(C34.2, R19.1)
	ALIAS(L_EXP_SOUND, R19.2)

	//
	// Mix
	//

	NET_C(SHOT_SOUND, BBD_OUT, D_BOMB_SOUND, BONUS_UP_SOUND, APPEARANCE_UFO_SOUND, S_EXP_SOUND, L_EXP_SOUND)
	ALIAS(OUTPUT, L_EXP_SOUND)

	//
	// Sheet 3, top (BATTLE_STAR)
	//

	NET_C(I_BATTLE_STAR, R202.1, D18.K)
	NET_C(R202.2, I_V5, R206.1)
	NET_C(D18.A, R207.1)
	NET_C(R207.2, C79.2, R205.1)
	NET_C(C79.1, GND)
	NET_C(R206.2, R205.2, IC27.3)
	NET_C(IC27.2, IC27.1, R169.1)
	NET_C(R169.2, R168.2, IC24.10)

	NET_C(I_V5, R231.2, IC33.4, IC33.8)
	NET_C(R231.1, IC33.7, R232.2)
	NET_C(R232.1, IC33.6, IC33.2, C83.1)
	NET_C(C83.2, GND)
	NET_C(IC33.1, C100.2)
	NET_C(C100.1, GND)
	NET_C(IC33.3, IC31.5)
	NET_C(IC31.6, I_V12, R195.1)
	NET_C(R195.2, TR10.B)
	NET_C(TR10.C, R194.2)
	NET_C(TR10.E, C76.2, IC26.1, R187.1)
	NET_C(R194.1, C76.1, IC26.2, R193.2)
	NET_C(R193.1, I_V12, R192.1)
	NET_C(R192.2, IC26.3, R190.2)
	NET_C(R190.1, GND)
	NET_C(R187.2, IC26.6, R188.1)
	NET_C(IC26.5, R189.2, R191.2)
	NET_C(R189.1, I_V5)
	NET_C(R191.1, GND)
	NET_C(R188.2, R80.1, R78.1, IC26.7)
	NET_C(R78.2, IC15.9, R86.2, C59.1)
	NET_C(R80.2, R82.2, IC15.10)
	NET_C(R82.1, GND)
	NET_C(R86.1, TR2.C)
	NET_C(TR2.E, GND)
	NET_C(TR2.B, R92.2, D4.K)
	NET_C(R92.1, GND)
	NET_C(D4.A, R90.1)
	NET_C(R90.2, R88.2, IC15.7)
	NET_C(R88.1, IC15.5, R85.2)
	NET_C(R85.1, I_V6)
	NET_C(IC15.6, IC15.8, C59.2, C37.1)
	NET_C(C37.2, IC10.5)

	NET_C(I_V6, R180.1, R183.1)
	NET_C(R180.2, IC26.13, C75.1, R179.2)
	NET_C(R183.2, R182.2, IC26.12)
	NET_C(R182.1, GND)
	NET_C(R179.1, TR9.C)
	NET_C(TR9.E, GND)
	NET_C(TR9.B, R181.2, D15.K)
	NET_C(R181.1, GND)
	NET_C(D15.A, R184.1)
	NET_C(R184.2, R186.2, IC26.8)
	NET_C(R186.1, IC26.10, R185.2)
	NET_C(R185.1, I_V6)
	NET_C(C75.2, IC26.14, IC26.9, IC24.3)
	NET_C(IC24.2, IC24.1, R166.1)
	NET_C(R166.2, IC24.6, R167.1)
	NET_C(IC24.5, I_V6)
	NET_C(R167.2, IC24.7, R168.1)
	NET_C(IC24.9, R162.2, R163.1)
	NET_C(R162.1, I_V6)
	NET_C(R163.2, IC24.8, IC24.12)
	NET_C(IC24.13, IC24.14, IC10.6)
	NET_C(IC10.10, C41.2)
	NET_C(C41.1, GND)
	NET_C(IC10.11, C40.1)
	NET_C(C40.2, R63.1)
	NET_C(R63.2, BBD_IN)

	//
	// Sheet 3, bottom (APPEARANCE UFO)
	//

	NET_C(I_APPEARANCE_UFO, R242.1, IC35.9)
	NET_C(R242.2, I_V5, R241.1, IC35.10, IC35.11)
	NET_C(R241.2, C88.1, IC35.7)
	NET_C(C88.2, IC35.6)
	NET_C(IC35.5, IC31.9)
	NET_C(IC31.8, R178.1)
	NET_C(R178.2, R177.1, D13.K)
	NET_C(R177.2, I_V12, R174.2)
	NET_C(D13.A, R174.1, C73.1, IC25.3)
	NET_C(C73.2, GND)
	NET_C(IC25.2, IC25.1, R96.1, R94.1, R216.1)
	NET_C(R94.2, C60.1, IC16.13, R100.2)
	NET_C(R96.2, R98.2, IC16.12)
	NET_C(R98.1, GND)
	NET_C(R100.1, TR3.C)
	NET_C(TR3.E, GND)
	NET_C(TR3.B, R108.2, D5.K)
	NET_C(R108.1, GND)
	NET_C(D5.A, R106.1)
	NET_C(R106.2, R104.2, IC16.1)
	NET_C(R104.1, IC16.3, R101.2)
	NET_C(R101.1, I_V6)
	NET_C(IC16.2, IC16.14, C60.2, R60.2)
	NET_C(R60.1, C42.1, R61.2)
	NET_C(R61.1, GND)
	NET_C(C42.2, IC11.1)

	NET_C(I_V12, R219.2)
	NET_C(R219.1, R215.1, R213.2)
	NET_C(R213.1, GND)
	NET_C(R215.2, IC29.10, R217.1)
	NET_C(R217.2, IC29.8, R218.2)
	NET_C(IC29.9, C82.2, R218.1, IC29.5)
	NET_C(C82.1, GND)
	NET_C(IC29.6, IC29.7, R221.1)
	NET_C(R221.2, IC29.2, R220.1)
	NET_C(R220.2, IC29.1, C43.2, IC11.2)
	NET_C(C43.1, GND)
	NET_C(IC29.3, R222.2, R224.2, C81.1)
	NET_C(R222.1, I_V6)
	NET_C(R224.1, GND)
	NET_C(C81.2, GND)
	NET_C(R216.2, R214.2, IC29.12)
	NET_C(R214.1, GND)
	NET_C(IC29.13, R212.1, R211.2)
	NET_C(R211.1, GND)
	NET_C(R212.2, IC29.14, IC11.6)
	NET_C(IC11.14, C46.2)
	NET_C(C46.1, GND)
	NET_C(IC11.15, C45.1)
	NET_C(C45.2, R64.1)
	NET_C(R64.2, R65.2, C44.1)
	NET_C(R65.1, GND)
	NET_C(C44.2, IC11.5)
	NET_C(IC11.10, C48.2)
	NET_C(C48.1, GND)
	NET_C(IC11.11, C47.1)
	NET_C(C47.2, R31.1, R30.1)
	ALIAS(APPEARANCE_UFO_SOUND, R30.2)
	NET_C(R31.2, BBD_IN)

	//
	// Unconnected inputs
	//

	NET_C(GND, IC7.9, IC7.10, IC7.12, IC7.13)		// -- part of final amp (not emulated)
	NET_C(GND, IC14.1, IC14.2, IC14.3, IC14.4, IC14.5, IC14.10, IC14.11, IC14.12, IC14.13)
	NET_C(GND, IC30.12, IC30.13)
	NET_C(GND, IC31.13)
	NET_C(GND, IC32.4, IC32.5, IC32.9, IC32.10, IC32.12, IC32.13)
	NET_C(GND, IC42.3, IC42.5, IC42.9, IC42.11, IC42.13)

	//
	// Unconnected outputs
	//

#if (ENABLE_FRONTIERS)

#define RXX 192
//	OPTIMIZE_FRONTIER(INVADER_1, RES_M(1), RXX)
#endif

NETLIST_END()
