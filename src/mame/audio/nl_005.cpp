// license:CC0
// copyright-holders:Aaron Giles

//
// Netlist for 005
//
// Derived from the schematics in the 005 manual.
//
// Known problems/issues:
//
//    * WIP.
//

#include "netlist/devices/net_lib.h"
#include "nl_005.h"


//
// Optimizations
//

#define ENABLE_FRONTIERS (0)
#define HLE_MELODY_CLOCK (1)
#define UNDERCLOCK_NOISE_GEN (1)



//
// Hacks
//



// MA150 Zener diode -- not really seeing this anywhere
// Possible subs: https://english.electronica-pt.com/components-cross-reference?ref=MA150
#define D_MA150(name) ZDIODE(name, "D(Is=0.1p Rs=16 CJO=2p Tt=12n Bv=100 Ibv=0.1p)")  // 1N4148
//#define D_MA150(name) ZDIODE(name, "D(Is=0.1p Rs=8 CJO=1p Tt=12n Bv=100 Ibv=0.1p)")  // 1N4149

// C458 NPN transistor -- not really seeing this anywhere either
// Possible subs: https://english.electronica-pt.com/components-cross-reference?ref=c458
#define Q_C458(name) QBJT_EB(name, "NPN")

#define TTL_74LS04_DIP TTL_7404_DIP
#define TTL_74LS32_DIP TTL_7432_DIP
#define TTL_74LS38_DIP TTL_7438_DIP
#define TTL_74LS161_DIP TTL_74161_DIP
#define TTL_74LS293_DIP TTL_74293_DIP
#define TTL_74LS393_DIP TTL_74393_DIP

#define PROM_6331_DIP PROM_82S123_DIP

// Totally faking this, no clue
#if 0
static NETLIST_START(_MB4391)
	RES(RIN1, RES_K(70))
	RES(RIN2, RES_K(70))
	ALIAS(VSS, RIN1.1)
	ALIAS(GND, RIN2.2)
	NET_C(RIN1.2, RIN2.1)
	ALIAS(IN, RIN2.1)

	RES(ROUT, RES_K(1))
	ALIAS(OUT, ROUT.2)

	AFUNC(FUNC, 5, "(A0-(A2+(A4-A2)/2)) * ((A1-A2)/(A4-A2)) + (A2+(A4-A2)/2)")
	NET_C(IN, FUNC.A0)
	ALIAS(CON, FUNC.A1)
	NET_C(GND, FUNC.A2)
	ALIAS(RO, FUNC.A3)
	NET_C(VSS, FUNC.A4)
	NET_C(FUNC.Q, ROUT.1)
NETLIST_END()
#else
static NETLIST_START(_MB4391)
    // MB4391 (fake implementation)
    // 2020 by beta-tester (https://github.com/beta-tester)
    //
    // values by guesses
    // for brdrline schematics only
    //
    // Vmix  = -(Vcon - 4.759384) / (4.759384 - 2.839579)
    // Vmix2 = pow(Vmix, 2)
    // Vout  = Vin * Vmix2
    //
    // Vcon(max) = 4.759384
    // Vcon(min) = 2.839584...2.839579 (@3.002360417e+01)(@3.152360417e+01)
    //AFUNC(fx, 5, "(A1)")
    //
    //AFUNC(fx, 5, "min(1, max(0, -(A1 - 4.759384) / (4.759384 - 2.839579)))")
    //AFUNC(fx, 5, "min(1, max(0, -(A1 - (A2-0.24)) / ((A2-0.24) - (A2/2+0.34))))")
    //
    // Vin(offset)=2.5 (VCC/2)
    //AFUNC(fx, 5, "(A0)")
    //AFUNC(fx, 5, "(A0-2.5)")
    //AFUNC(fx, 5, "(A0-(A2/2))")
    //
    // vin * mix
    AFUNC(fx, 5, "(A0-(A2/2)) * ((A2-A3)/5)*(min(1, max(0, -(A1 - 4.759384) / (4.759384 - 2.839579))))")
    //
    // vin * pow(mix, 2)
    //AFUNC(fx, 5, "(A0-(A2/2)) * pow((min(1, max(0, -(A1 - 4.759384) / (4.759384 - 2.839579))), 2))")

    RES(R1, RES_K(10))
    RES(R2, RES_K(10))
    NET_C(VSS, R1.1)
    NET_C(IN,  R1.2, R2.1)
    NET_C(R2.2, GND)

    RES(Rout, RES_K(1))
    NET_C(fx.Q, Rout.1) // fx(IN, CON, VCC, GND, RO) = OUT

    // INPUT
    ALIAS(IN,  fx.A0) // IN
    ALIAS(CON, fx.A1) // CON
    ALIAS(VSS, fx.A2) // VSS
    ALIAS(GND, fx.A3) // GND
    ALIAS(RO,  fx.A4) // RO

    // OUTPUT
    ALIAS(OUT, Rout.2)  // OUT
NETLIST_END()
#endif

static NETLIST_START(_MB4391_DIP)
	SUBMODEL(_MB4391, A)
	SUBMODEL(_MB4391, B)

	DIPPINS(   /*       +--------------+      */
		 A.IN, /*   1IN |1     ++    16| 1VSS */ A.VSS,
		A.CON, /*  1CON |2           15| 1OUT */ A.OUT,
		A.GND, /*  1GND |3           14| 1R0  */ A.RO,
		 NC.I, /*    NC |4   MB4391  13| NC   */ NC.I,
		 B.IN, /*   2IN |5           12| 2VSS */ B.VSS,
		B.CON, /*  2CON |6           11| 2OUT */ B.OUT,
		B.GND, /*  2GND |7           10| 2R0  */ B.RO,
		 NC.I, /*    NC |8            9| NC   */ NC.I
			   /*       +--------------+      */
	)
NETLIST_END()


#define MB4391_DIP(name) SUBMODEL(_MB4391_DIP, name)



//
// Main netlist
//

NETLIST_START(005)

#if 1
	SOLVER(Solver, 1000)
	PARAM(Solver.DYNAMIC_TS, 1)
	PARAM(Solver.DYNAMIC_MIN_TIMESTEP, 4e-5)
	PARAM(Solver.Solver_60.DYNAMIC_MIN_TIMESTEP, 9e-7) // bomb drop
	PARAM(Solver.Solver_62.DYNAMIC_MIN_TIMESTEP, 8e-6) // whistle
#else
	SOLVER(Solver, 4800000)
#endif

	LOCAL_SOURCE(_MB4391)
	LOCAL_SOURCE(_MB4391_DIP)

	TTL_INPUT(I_A0, 0)
	ALIAS(LARGE_EXPL_SOUND_TRIG, I_A0)
	TTL_INPUT(I_A1, 0)
	ALIAS(SMALL_EXPL_SOUND_TRIG, I_A1)
	TTL_INPUT(I_A2, 0)
	ALIAS(BOMB_DROP_SOUND_TRIG, I_A2)
	TTL_INPUT(I_A3, 0)
	ALIAS(PISTOL_SHOOT_SOUND_TRIG, I_A3)
	TTL_INPUT(I_A4, 0)
	ALIAS(MISSILE_SOUND_TRIG, I_A4)
	TTL_INPUT(I_A5, 0)
	ALIAS(HELICOPTER_SOUND_TRIG, I_A5)
	TTL_INPUT(I_A6, 0)
	ALIAS(WHISTLE_SOUND_TRIG, I_A6)

	NET_C(GND, I_A0.GND, I_A1.GND, I_A2.GND, I_A3.GND, I_A4.GND, I_A5.GND, I_A6.GND)
	NET_C(I_V5, I_A0.VCC, I_A1.VCC, I_A2.VCC, I_A3.VCC, I_A4.VCC, I_A5.VCC, I_A6.VCC)

	TTL_INPUT(I_B0, 0)
	TTL_INPUT(I_B1, 0)
	TTL_INPUT(I_B2, 0)
	TTL_INPUT(I_B3, 0)
	TTL_INPUT(I_B4, 0)
	TTL_INPUT(I_B5, 0)
	TTL_INPUT(I_B6, 0)

	NET_C(GND, I_B0.GND, I_B1.GND, I_B2.GND, I_B3.GND, I_B4.GND, I_B5.GND, I_B6.GND)
	NET_C(I_V5, I_B0.VCC, I_B1.VCC, I_B2.VCC, I_B3.VCC, I_B4.VCC, I_B5.VCC, I_B6.VCC)

	ANALOG_INPUT(I_V5, 5)
	ANALOG_INPUT(I_V6, 6)
	ANALOG_INPUT(I_V12, 12)

	POT(VR1, RES_K(50))
	POT(VR2, RES_K(50))
	POT(VR3, RES_K(50))
	POT(VR4, RES_K(50))
	POT(VR5, RES_K(50))
	POT(VR6, RES_K(50))
	POT(VR7, RES_K(50))
	POT(VR8, RES_K(50))
//	POT(VR9, 500)			// Controls frequency of oscillator

	RES(R1, RES_K(4.7))
	RES(R2, RES_K(4.7))
	RES(R3, RES_K(4.7))
	RES(R4, RES_K(4.7))
	RES(R5, RES_K(15))
	RES(R6, RES_K(47))
	RES(R7, RES_K(47))
	RES(R8, RES_K(47))
	RES(R9, RES_K(4.7))
	RES(R10, RES_K(470))
	RES(R11, RES_K(470))
	RES(R12, 470)
	RES(R13, RES_K(4.7))
	RES(R14, RES_M(1))
	RES(R15, RES_M(1))
	RES(R16, 470)
	RES(R17, RES_K(1))
	RES(R18, RES_K(470))
	RES(R19, RES_K(470))
	RES(R20, 470)
	RES(R21, RES_K(1))
	RES(R22, RES_K(470))
	RES(R23, RES_K(470))
	RES(R24, RES_K(1))
	RES(R25, RES_K(1))
	RES(R26, RES_K(4.7))
	RES(R27, RES_K(4.7))
	RES(R28, RES_K(4.7))
	RES(R29, RES_K(4.7))
	RES(R30, RES_K(4.7))
	RES(R31, RES_K(4.7))
	RES(R32, RES_K(4.7))
	RES(R33, RES_K(4.7))
	RES(R34, RES_K(27))
	RES(R35, RES_K(330))
	RES(R36, RES_M(1))
	RES(R37, RES_K(47))
	RES(R38, RES_K(47))
	RES(R39, RES_K(680))
	RES(R40, RES_K(100))
	RES(R41, RES_K(4.7))
	RES(R42, RES_K(2.2))
	RES(R43, RES_K(2.2))
	RES(R44, RES_K(10))
	RES(R45, RES_K(10))
	RES(R46, RES_K(150))
	RES(R47, RES_K(51))
	RES(R48, RES_K(2.7))
	RES(R49, RES_K(3.9))
	RES(R50, RES_K(15))
	RES(R51, RES_K(150))
	RES(R52, RES_K(100))
	RES(R53, RES_K(15))
	RES(R54, RES_K(15))
	RES(R55, RES_K(100))
	RES(R56, RES_K(10))
	RES(R57, RES_K(4.7))
	RES(R58, RES_K(15))
	RES(R59, RES_K(100))
	RES(R60, RES_K(51))
	RES(R61, 100)
	RES(R62, RES_K(10))
	RES(R63, RES_K(100))
	RES(R64, RES_K(1))
	RES(R65, RES_K(15))
	RES(R66, RES_K(220))
	RES(R67, RES_K(390))
	RES(R68, RES_K(2.2))
	RES(R69, RES_K(2.2))
	RES(R70, RES_K(10))
	RES(R71, RES_K(22))
	RES(R72, RES_K(51))
	RES(R73, RES_K(51))
	RES(R74, RES_K(10))
	RES(R75, RES_K(51))	// parts sheet says 15K
	RES(R76, RES_K(100))
	RES(R77, RES_K(100))
	RES(R78, RES_K(10))
	RES(R79, RES_K(100))
	RES(R80, RES_K(10))
	RES(R81, RES_K(680))
	RES(R82, 100)
	RES(R83, RES_K(2.2))
	RES(R84, RES_K(2.2))
	RES(R85, RES_K(15))
	RES(R86, RES_K(47))
	RES(R87, 100)
	RES(R88, RES_K(1.5))
	RES(R89, RES_K(3.3))
	RES(R90, RES_K(680))
	RES(R91, RES_K(10))
	RES(R92, RES_K(100))
	RES(R93, RES_K(10))
	RES(R94, 120)
	RES(R95, 220)
	RES(R96, 820)
	RES(R97, RES_K(10))
	RES(R98, RES_K(150))
//	RES(R99, RES_K(1))
	RES(R100, RES_K(10))
	RES(R101, RES_K(10))
	RES(R102, RES_K(10))
	RES(R103, RES_K(10))
	RES(R104, RES_K(12))
	RES(R105, RES_K(12))
	RES(R106, RES_K(4.7))
	RES(R107, RES_K(10))
	RES(R108, RES_K(51))
	RES(R109, RES_K(51))
	RES(R110, RES_K(100))
	RES(R111, RES_K(10))
	RES(R112, RES_K(10))
	RES(R113, RES_K(15))
	RES(R114, RES_K(1))
	RES(R115, RES_K(22))
	RES(R116, RES_K(22))
//	RES(R117, RES_K(47))
//	RES(R118, RES_K(10))
	RES(R119, RES_K(3.3))
	RES(R120, RES_K(100))
	RES(R121, RES_K(100))
	RES(R122, RES_K(3.3))
	RES(R123, RES_K(1))
//	RES(R124, RES_K(1))
	RES(R125, RES_K(51))
	RES(R126, RES_K(51))
	RES(R127, RES_K(51))
	RES(R128, RES_K(51))
	RES(R129, RES_K(51))
	RES(R130, RES_K(51))
	RES(R131, RES_K(51))
	RES(R132, RES_K(51))
	// R133?
//	RES(R134, 220)			// part of melody oscillator - not used
	RES(R135, RES_K(10))
	RES(R136, RES_K(100))
	RES(R137, RES_K(100))
	RES(R138, RES_K(33))
	RES(R139, RES_K(33))
	// R140?
	RES(R141, RES_K(4.7))

//	CAP(C1, CAP_U(470))
//	CAP(C2, CAP_U(470))
//	CAP(C3, CAP_U(470))
//	CAP(C4, CAP_U(470))
//	CAP(C5, CAP_U(470))
//	CAP(C6, CAP_U(470))
//	CAP(C7, CAP_U(0.1))
//	CAP(C8, CAP_U(2.2))
//	CAP(C9, CAP_P(4700))	// part of melody oscillator - not used (parts list says 0.047)
//	CAP(C10, CAP_U(0.1))
	CAP(C11, CAP_U(0.01))
//	CAP(C12, CAP_U(0.1))
	CAP(C13, CAP_U(10))
	CAP(C14, CAP_U(3.3))
	CAP(C15, CAP_U(1))
	// C16?
	CAP(C17, CAP_U(1))
//	CAP(C18, CAP_U(0.1))
//	CAP(C19, CAP_U(0.1))
//	CAP(C20, CAP_U(0.1))
//	CAP(C21, CAP_U(0.1))
//	CAP(C22, CAP_U(0.1))
//	CAP(C23, CAP_U(0.1))
//	CAP(C24, CAP_U(0.1))
	CAP(C25, CAP_U(1))
	CAP(C26, CAP_U(1))
	CAP(C27, CAP_U(1))
	CAP(C28, CAP_U(0.47))
//	CAP(C29, CAP_U(0.1))
//	CAP(C30, CAP_U(0.1))
//	CAP(C31, CAP_U(0.1))
//	CAP(C32, CAP_U(0.1))
	CAP(C33, CAP_U(0.1))	// parts list says 0.001, but ruins envelope on melody
	CAP(C34, CAP_U(0.01))
	CAP(C35, CAP_P(1000))	// parts list says 0.1, but melody doesn't clock with that
	CAP(C36, CAP_U(1))
//	CAP(C37, CAP_U(0.1))
//	CAP(C38, CAP_U(0.1))
	CAP(C39, CAP_U(2.2))
//	CAP(C40, CAP_U(0.1))
	CAP(C41, CAP_U(3.3))
	CAP(C42, CAP_U(0.01))
	CAP(C43, CAP_U(10))
	CAP(C44, CAP_U(1))
//	CAP(C45, CAP_U(0.1))
	CAP(C46, CAP_U(10))
	CAP(C47, CAP_U(0.039))
	CAP(C48, CAP_U(0.039))
//	CAP(C49, CAP_U(0.1))
	CAP(C50, CAP_U(4.7))
	CAP(C51, CAP_U(4.7))
	CAP(C52, CAP_U(0.047))	// parts list says 0.0047? 0.047? explosions
	CAP(C53, CAP_U(0.047))	// parts list says 0.0047? 0.047? explosions
//	CAP(C54, CAP_U(0.1))
	CAP(C55, CAP_U(0.022))
	CAP(C56, CAP_U(0.022))
	CAP(C57, CAP_U(1))
//	CAP(C58, CAP_U(0.1))
	CAP(C59, CAP_P(4700))	// parts list says 0.047u (bomb drop)
	CAP(C60, CAP_U(1))		// parts list says 0.1u (pistol shoot)
//	CAP(C61, CAP_U(1))
	CAP(C62, CAP_U(1))
	CAP(C63, CAP_U(0.1))
	CAP(C64, CAP_U(10))
	// C65?
	CAP(C66, CAP_U(4.7))
	CAP(C67, CAP_U(0.01))
	CAP(C68, CAP_U(0.01))
//	CAP(C69, CAP_U(0.1))
	CAP(C70, CAP_U(0.01))
	CAP(C71, CAP_U(0.01))
	CAP(C72, CAP_U(2.2))
	CAP(C73, CAP_U(2.2))
	// C74?
	CAP(C75, CAP_U(0.68))
//	CAP(C76, CAP_U(0.1))
	CAP(C77, CAP_U(1))
	CAP(C78, CAP_U(1))
	CAP(C79, CAP_U(2.2))
	CAP(C80, CAP_P(680))
	CAP(C81, CAP_U(1))
//	CAP(C82, CAP_U(0.1))
	CAP(C83, CAP_U(2.2))
	CAP(C84, CAP_U(1))
	CAP(C85, CAP_U(1))
	// C86?
	CAP(C87, CAP_U(1))
	CAP(C88, CAP_U(1))
	CAP(C89, CAP_P(680))
	CAP(C90, CAP_P(680))
	CAP(C91, CAP_U(0.022))
	// C92?
	CAP(C93, CAP_U(2.2))
	// C94?
	CAP(C95, CAP_U(2.2))
	CAP(C96, CAP_U(1))
	CAP(C97, CAP_U(1))
	CAP(C98, CAP_U(1))
	CAP(C99, CAP_U(1))
	CAP(C100, CAP_U(1))
	CAP(C101, CAP_U(1))
	CAP(C102, CAP_U(1))
	CAP(C103, CAP_U(1))
	CAP(C104, CAP_U(2.2))
	CAP(C105, CAP_U(10))
	CAP(C106, CAP_U(4.7))
	CAP(C107, CAP_P(680))
	CAP(C108, CAP_U(2.2))	// parts list says 1.0
//	CAP(C109, CAP_P(680))
	CAP(C110, CAP_U(1))
//	CAP(C111, CAP_U(0.1))
	CAP(C112, CAP_U(1))
	CAP(C113, CAP_U(1))
	CAP(C114, CAP_P(680))
	CAP(C115, CAP_U(1))
	CAP(C116, CAP_P(680))
	CAP(C117, CAP_U(1))
//	CAP(C118, CAP_U(0.1))
//	CAP(C119, CAP_U(10))
	CAP(C120, CAP_U(1.5))
	CAP(C121, CAP_P(680))

	D_MA150(D1)
	D_MA150(D2)
	D_MA150(D3)
	D_MA150(D4)
	D_MA150(D5)
	D_MA150(D6)
	D_MA150(D7)
	D_MA150(D8)
	D_MA150(D9)

	Q_C458(Q1)
	Q_C458(Q2)
	Q_C458(Q3)
	Q_C458(Q4)
	Q_C458(Q5)
	Q_C458(Q6)

	TTL_74123_DIP(U1)		// Dual Retriggerable One-Shot with Clear and Complementary Outputs
	NET_C(U1.8, GND)
	NET_C(U1.16, I_V5)

	TTL_74123_DIP(U2)		// Dual Retriggerable One-Shot with Clear and Complementary Outputs
	NET_C(U2.8, GND)
	NET_C(U2.16, I_V5)

	NE555_DIP(U3)			// Timer
	NET_C(U3.1, GND)
	NET_C(U3.8, I_V5)

	TTL_74LS14_DIP(U4)		// Dual Gate/Hex Inverter
	NET_C(U4.7, GND)
	NET_C(U4.14, I_V5)

//	8255(U5) -- emulated in MAME

	TTL_74LS38_DIP(U6)		// Quad 2-Input NAND buffer
	NET_C(U6.7, GND)
	NET_C(U6.14, I_V5)

#if (!HLE_MELODY_CLOCK)
	TTL_74LS161_DIP(U7)		// 4-Bit Binary Counter
	NET_C(U7.8, GND)
	NET_C(U7.16, I_V5)
#endif

	PROM_6331_DIP(U8)		// Bioplar PROM
	PARAM(U8.A.ROM, "6331_sound_u8")
#if (!HLE_MELODY_CLOCK)
	PARAM(U8.FORCE_TRISTATE_LOGIC, 1)
#endif
	NET_C(U8.8, GND)
	NET_C(U8.16, I_V5)

	TTL_74LS393_DIP(U9)		// Dual 4-Stage Binary Counter
	NET_C(U9.7, GND)
	NET_C(U9.14, I_V5)

//	TTL_74LS30_DIP(U10)		// 8-Input NAND Gate
//	NET_C(U10.7, GND)
//	NET_C(U10.14, I_V5)

//	TTL_74LS04_DIP(U11)		// Hex Inverting Gates
//	NET_C(U11.7, GND)
//	NET_C(U11.14, I_V5)

	LM324_DIP(U12)			// Op. Amp.
	NET_C(U12.4, I_V12)
	NET_C(U12.11, GND)

	MM5837_DIP(U13)			// Noise generator
#if (UNDERCLOCK_NOISE_GEN)
	// officially runs at 48-112kHz, but little noticeable difference
	// in exchange for a big performance boost
	PARAM(U13.FREQ, 12000)
#endif

	TTL_74LS293_DIP(U14)	// 4-Bit Binary Counter
	NET_C(U14.7, GND)
	NET_C(U14.14, I_V5)

#if (!HLE_MELODY_CLOCK)
	TTL_74LS161_DIP(U15)	// 4-Bit Binary Counter
	NET_C(U15.8, GND)
	NET_C(U15.16, I_V5)
#endif

	EPROM_2716_DIP(U16)		// EPROM
	PARAM(U16.A.ROM, "epr_1286_sound_16")
	RES(RU16_DUMMY, RES_K(1))
	NET_C(U16.16, U16.17, RU16_DUMMY.1)
	NET_C(RU16_DUMMY.2, GND)
	NET_C(U16.12, GND)
	NET_C(U16.24, I_V5)

//	TTL_74LS32_DIP(U17)		// Quad 2-Input OR Gate
//	NET_C(U17.7, GND)
//	NET_C(U17.14, I_V5)

	LM324_DIP(U18)			// Op. Amp.
	NET_C(U18.4, I_V12)
	NET_C(U18.11, GND)

	TTL_7417_DIP(U19)		// Hex Buffers with Open-Collector High-Voltage Outputs
	NET_C(U19.7, GND)
	NET_C(U19.14, I_V5)

	TTL_74123_DIP(U20)		// Dual Retriggerable One-Shot with Clear and Complementary Outputs
	NET_C(U20.8, GND)
	NET_C(U20.16, I_V5)

	NE555_DIP(U21)			// Timer
	NET_C(U21.1, GND)
	NET_C(U21.8, I_V5)

	NE555_DIP(U22)			// Timer
	NET_C(U22.1, GND)
	NET_C(U22.8, I_V5)

	LM324_DIP(U23)			// Op. Amp.
	NET_C(U23.4, I_V12)
	NET_C(U23.11, GND)

	LM324_DIP(U24)			// Op. Amp.
	NET_C(U24.4, I_V12)
	NET_C(U24.11, C63.2)	// special
	NET_C(C63.1, GND)

	LM324_DIP(U25)			// Op. Amp.
	NET_C(U25.4, I_V12)
	NET_C(U25.11, GND)

	LM324_DIP(U26)			// Op. Amp.
	NET_C(U26.4, I_V12)
	NET_C(U26.11, GND)

	NE555_DIP(U27)			// Timer
	NET_C(U27.1, GND)
	NET_C(U27.8, I_V5)

	MB4391_DIP(U28)			// Sega custom
	NET_C(U28.3, U28.7, GND)
	NET_C(U28.12, I_V12)
	NET_C(U28.16, I_V5) 	// guess

	CD4016_DIP(U29)			// Quad Bilateral Switch
	NET_C(U29.7, GND)
	NET_C(U29.14, I_V12)

	MB4391_DIP(U30)			// Sega custom
	NET_C(U30.3, U30.7, GND)
	NET_C(U30.12, U30.16, I_V5) // guess

	MB4391_DIP(U31)			// Sega custom
	NET_C(U31.3, U31.7, GND)
	NET_C(U31.12, U31.16, I_V5) // guess

	MB4391_DIP(U32)			// Sega custom
	NET_C(U32.3, U32.7, GND)
	NET_C(U32.12, U32.16, I_V5) // guess

	//
	// Sheet 1, bottom-left
	//

	NET_C(I_V5, R5.1)
	NET_C(R5.2, R4.2, D1.A, U3.7)
	NET_C(R4.1, C120.1, D1.K, U3.6, U3.2)
	NET_C(C120.2, GND)
	NET_C(U3.4, U16.15)
	NET_C(U3.5, C11.2)
	NET_C(C11.1, GND)
	NET_C(U3.3, U6.5)

	NET_C(I_B5, U6.4, U4.11)
	NET_C(I_B6, U4.9)
	NET_C(U4.8, U6.2)
	NET_C(U4.10, U6.1)
	NET_C(U6.6, R141.1, U6.3, U9.1, U2.1)
	NET_C(R141.2, I_V5)
	NET_C(I_B4, U9.2, U9.12, U14.12, U14.13)

	NET_C(U9.8, U16.2)
	NET_C(U9.9, U16.3)
	NET_C(U9.10, U16.4)
	NET_C(U9.11, U16.5)
	NET_C(U9.13, U9.6, U16.6)
	NET_C(U9.5, U16.7)
	NET_C(U9.4, U16.8)

	NET_C(I_B3, U16.19)
	NET_C(I_B2, U16.22)
	NET_C(I_B1, U16.23)
	NET_C(I_B0, U16.1)
	NET_C(U16.20, U16.18, GND)
//	NET_C(U16.21, I_V5) -- programming pin, not hooked up
	NET_C(U16.15, R27.1)
	NET_C(U16.14, R28.1, U8.14)
	NET_C(U16.13, R29.1, U8.13)
	NET_C(U16.11, R30.1, U8.12)
	NET_C(U16.10, R31.1, U8.11)
	NET_C(U16.9, R32.1, U8.10)
	NET_C(R27.2, R28.2, R29.2, R30.2, R31.2, R32.2, I_V5)

	// Oscillator clock, with VR to control
	NET_C(U8.15, GND)
#if (HLE_MELODY_CLOCK)
	// decode the PROM output into a number
	AFUNC(DECODER, 8, "if(A0>2.5,1,0)+if(A1>2.5,2,0)+if(A2>2.5,4,0)+if(A3>2.5,8,0)+if(A4>2.5,16,0)+if(A5>2.5,32,0)+if(A6>2.5,64,0)+if(A7>2.5,128,0)")
	NET_C(DECODER.A0, U8.1)
	NET_C(DECODER.A1, U8.2)
	NET_C(DECODER.A2, U8.3)
	NET_C(DECODER.A3, U8.4)
	NET_C(DECODER.A4, U8.5)
	NET_C(DECODER.A5, U8.6)
	NET_C(DECODER.A6, U8.7)
	NET_C(DECODER.A7, U8.9)
	// U7/U15 count up from the PROM output to 256 and then reload
	VARCLOCK(MELODY_CLK, 1, "if(A0<255,0.000001*(256-A0),0.001)")
	NET_C(MELODY_CLK.GND, GND)
	NET_C(MELODY_CLK.VCC, I_V5)
	NET_C(MELODY_CLK.A0, DECODER.Q)
	// special case: FF from the PROM will effectively suppress the clock
	AFUNC(MELODY_SUPPRESS, 2, "if(A0<255,A1,0)")
	NET_C(MELODY_SUPPRESS.A0, DECODER.Q)
	NET_C(MELODY_SUPPRESS.A1, MELODY_CLK.Q)
	NET_C(MELODY_SUPPRESS.Q, U4.13, C35.2, U14.11)
	NET_C(U4.3, U4.4, U4.5, U4.6, GND)
	NET_C(U4.12, GND)
#else
	NET_C(U8.1, U7.3)
	NET_C(U8.2, U7.4)
	NET_C(U8.3, U7.5)
	NET_C(U8.4, U7.6)
	NET_C(U8.5, U15.3)
	NET_C(U8.6, U15.4)
	NET_C(U8.7, U15.5)
	NET_C(U8.9, U15.6)
	CLOCK(OSC1, 350000) // 1/1.39*4700e-12*(220+500) = 212595
	NET_C(OSC1.GND, GND)
	NET_C(OSC1.VCC, I_V5)
	NET_C(U4.3, U4.4, U4.5, U4.6, GND)
	NET_C(OSC1.Q, U7.2, U15.2)
	NET_C(U7.10, U7.7, U7.1, I_V5)
	NET_C(U7.15, U15.7, U15.10)
	NET_C(U7.9, U15.9, U4.12)
	NET_C(U15.1, I_V5)
	NET_C(U15.15, U4.13, C35.2, U14.11)
#endif
	NET_C(C35.1, GND)
	NET_C(U14.5, R34.2)
	NET_C(U14.8, R50.2)
	NET_C(R34.1, R49.1, C33.2, R135.2)
	NET_C(C33.1, GND)
	NET_C(R50.1, R49.2, C34.2)
	NET_C(C34.1, GND)
	NET_C(R135.1, C104.2)
	NET_C(C104.1, U32.5)

	NET_C(U2.2, U2.3, I_V5)
	NET_C(U2.14, C14.2)
	NET_C(C14.1, R7.1, U2.15)
	NET_C(R7.2, I_V5)
	NET_C(U2.4, R13.2, D2.K)
	NET_C(R13.1, I_V5)
	NET_C(D2.A, R12.1)
	NET_C(R12.2, C27.1, R11.1)
	NET_C(C27.2, GND)
	NET_C(R11.2, U12.5, R10.1)
	NET_C(R10.2, I_V5)
	NET_C(U12.6, U12.7, U32.6)
	NET_C(U32.10, C107.2)
	NET_C(C107.1, GND)
	NET_C(U32.11, C108.1)
	ALIAS(MELODY, C108.2)

	//
	// Sheet 2, top-left (NOISE/HELICOPTER SOUND)
	//

	NET_C(U13.4, I_V12)
	NET_C(U13.1, U13.2, GND)
	NET_C(U13.3, C39.1)
	ALIAS(NOISE1, U13.3)
	NET_C(C39.2, R55.1)
	NET_C(R55.2, U18.13, R56.1)
	NET_C(U18.12, I_V6)
	NET_C(R56.2, U18.14, C73.1)
	ALIAS(NOISE2, U18.14)
	NET_C(C73.2, R93.1)
	NET_C(R93.2, R94.2, C71.2, C70.1)

	NET_C(R94.1, Q6.C)
	NET_C(Q6.E, GND)
	NET_C(Q6.B, R95.2, R96.2)
	NET_C(R95.1, GND)
	NET_C(R96.1, U28.2, U23.14, U23.13)
	NET_C(U23.12, D9.K, C75.1, R98.1, U22.2, U22.6)
	NET_C(C75.2, GND)
	NET_C(D9.A, R98.2, R97.1, U22.7)
	NET_C(R97.2, I_V5)
	NET_C(U22.4, I_V5)
	RES(RU22_DUMMY, RES_K(1))
	NET_C(U22.3, RU22_DUMMY.1)	// OUTPUT (3) not connected
	NET_C(RU22_DUMMY.2, GND)

	NET_C(C71.1, R92.1, U23.9)
	NET_C(C70.2, R92.2, U23.8, C66.1)
	NET_C(U23.10, I_V6)
	NET_C(C66.2, R110.1)
	NET_C(R110.2, U28.1)
	NET_C(U28.14, C90.2)
	NET_C(C90.1, GND)
	NET_C(U28.15, R109.1)
	NET_C(R109.2, R108.2, C87.2)
	NET_C(R108.1, GND)
	NET_C(C87.1, U28.5)

	NET_C(HELICOPTER_SOUND_TRIG, U19.11)
	NET_C(U19.10, R41.1, D6.K)
	NET_C(R41.2, I_V5)
	NET_C(D6.A, R40.1)
	NET_C(R40.2, C46.1, R39.1)
	NET_C(C46.2, GND)
	NET_C(R39.2, R90.1, U23.3)
	NET_C(R90.2, I_V5)
	NET_C(U23.2, U23.1, U28.6)
	NET_C(U28.10, C89.2)
	NET_C(C89.1, GND)
	NET_C(U28.11, C88.1)
	ALIAS(HELICOPTER_SOUND, C88.2)

	//
	// Sheet 2, top-right (WHISTLE SOUND)
	//

	NET_C(I_V12, R122.1)
	NET_C(R122.2, R123.2, R119.1)
	NET_C(R123.1, GND)
	NET_C(R119.2, U26.12, R121.1)
	NET_C(R121.2, U26.14, R120.2)
	NET_C(R120.1, U26.13, C95.1, U26.3)
	NET_C(C95.2, GND)
	NET_C(U26.2, U26.1, U27.5)
	NET_C(U27.3, R112.2)

	NET_C(U27.4, I_V5)
	NET_C(R112.1, C93.2, R111.2)
	NET_C(R111.1, GND)
	NET_C(C93.1, R116.1)
	NET_C(R116.2, U26.6, R115.1)
	NET_C(U26.5, I_V6)
	NET_C(R115.2, U26.7, C79.1)
	NET_C(C79.2, U29.8)
	NET_C(U27.7, R113.2, R114.1)
	NET_C(R114.2, I_V5)
	NET_C(U27.6, U27.2, R113.1, C91.1)
	NET_C(C91.2, GND)

	NET_C(U29.6, R68.2, U6.8)
	NET_C(R68.1, I_V12)
	NET_C(U6.9, U6.10, WHISTLE_SOUND_TRIG)
	NET_C(U29.9, R102.2, C83.1, R103.1)
	NET_C(R103.2, I_V12)
	NET_C(R102.1, GND)
	ALIAS(WHISTLE_SOUND, C83.2)

	//
	// Sheet 2, middle (EXPLOSIONS)
	//

	NET_C(LARGE_EXPL_SOUND_TRIG, U2.9, R3.1)
	NET_C(R3.2, I_V5)
	NET_C(U2.10, U2.11, I_V5)
	NET_C(U2.6, C13.2)
	NET_C(C13.1, R6.1, U2.7)
	NET_C(R6.2, I_V5)
	NET_C(U2.12, R17.1, D3.K)
	NET_C(R17.2, I_V5)
	NET_C(D3.A, R16.1)
	NET_C(R16.2, C25.1, R15.1)
	NET_C(C25.2, GND)
	NET_C(R15.2, U12.3, R14.1)
	NET_C(R14.2, I_V5)
	NET_C(U12.2, U12.1, U31.6)

	NET_C(NOISE1, C36.1)
	NET_C(C36.2, R46.1)
	NET_C(R46.2, U18.2, R47.1)
	NET_C(U18.3, I_V6)
	NET_C(R47.2, U18.1, C50.1, C51.1)
	NET_C(C50.2, R54.1)
	NET_C(R54.2, R53.1, C52.1)
	NET_C(R53.2, C53.1, U18.10)
	NET_C(C53.2, I_V6)
	NET_C(U18.9, R52.2, R51.1)
	NET_C(R52.1, I_V6)
	NET_C(R51.2, U18.8, C113.1, C52.2)
	NET_C(C113.2, R139.1)
	NET_C(R139.2, U31.5)
	NET_C(U31.10, C114.2)
	NET_C(C114.1, GND)
	NET_C(U31.11, C115.1)
	ALIAS(LARGE_EXPLOSION_SOUND, C115.2)

	NET_C(C51.2, R45.1)
	NET_C(R45.2, R44.1, C47.1)
	NET_C(R44.2, C48.1, U18.5)
	NET_C(C48.2, I_V6)
	NET_C(U18.6, R43.2, R42.1)
	NET_C(R43.1, I_V6)
	NET_C(R42.2, U18.7, C47.2, C112.1)
	NET_C(C112.2, R138.1)
	NET_C(R138.2, U31.1)
	NET_C(U31.14, C116.2)
	NET_C(C116.1, GND)
	NET_C(U31.15, C117.1)
	ALIAS(SMALL_EXPLOSION_SOUND, C117.2)

	NET_C(SMALL_EXPL_SOUND_TRIG, R2.1, U1.1)
	NET_C(R2.2, I_V5)
	NET_C(U1.2, U1.3, I_V5)
	NET_C(U1.14, C17.2)
	NET_C(C17.1, R9.1, U1.15)
	NET_C(R9.2, I_V5)
	NET_C(U1.4, R21.1, D4.K)
	NET_C(R21.2, I_V5)
	NET_C(D4.A, R20.1)
	NET_C(R20.2, C28.1, R19.1)
	NET_C(C28.2, GND)
	NET_C(R19.2, U12.12, R18.1)
	NET_C(R18.2, I_V5)
	NET_C(U12.13, U12.14, U31.2)

	//
	// Sheet 2, bottom-left (MISSILE)
	//

	NET_C(MISSILE_SOUND_TRIG, R1.1, U1.9)
	NET_C(R1.2, I_V5)
	NET_C(U1.10, U1.11, I_V5)
	NET_C(U1.6, C15.2)
	NET_C(C15.1, R8.1, U1.7)
	NET_C(R8.2, I_V5)
	NET_C(U1.12, R25.1, D5.K)
	NET_C(R25.2, I_V5)
	NET_C(D5.A, R24.1)
	NET_C(R24.2, C26.1, R23.1)
	NET_C(C26.2, GND)
	NET_C(R23.2, U12.10, R22.1)
	NET_C(R22.2, I_V5)
	NET_C(U12.9, U12.8, R85.1, U32.2)
	NET_C(R85.2, R89.2, Q5.B)
	NET_C(R89.1, GND)
	NET_C(Q5.E, GND)
	NET_C(Q5.C, R88.2, R87.1)
	NET_C(R88.1, GND)
	NET_C(R87.2, C67.2, C68.1)
	NET_C(C67.1, R91.2, R86.1, U23.6)
	NET_C(R91.1, C72.2)
	NET_C(C72.1, NOISE2)
	NET_C(U23.5, I_V6)
	NET_C(U23.7, R86.2, C68.2, C105.1)
	NET_C(C105.2, R137.1)
	NET_C(R137.2, R136.2, C106.2)
	NET_C(R136.1, GND)
	NET_C(C106.1, U32.1)
	NET_C(U32.14, C121.2)
	NET_C(C121.1, GND)
	NET_C(U32.15, C110.1)
	ALIAS(MISSILE_SOUND, C110.2)

	//
	// Sheet 2, bottom-right (mixer)
	//

	NET_C(LARGE_EXPLOSION_SOUND, VR2.3)
	NET_C(VR2.1, GND)
	NET_C(VR2.2, C97.2)
	NET_C(C97.1, R126.1)
	NET_C(R126.2, R125.2, R131.2, R129.2, R127.2, R132.2, R130.2, R128.2)

	NET_C(SMALL_EXPLOSION_SOUND, VR1.3)
	NET_C(VR1.1, GND)
	NET_C(VR1.2, C96.2)
	NET_C(C96.1, R125.1)

	NET_C(BOMB_DROP_SOUND, VR7.3)
	NET_C(VR7.1, GND)
	NET_C(VR7.2, C102.2)
	NET_C(C102.1, R131.1)

	NET_C(PISTOL_SHOOT_SOUND, VR5.3)
	NET_C(VR5.1, GND)
	NET_C(VR5.2, C100.2)
	NET_C(C100.1, R129.1)

	NET_C(MISSILE_SOUND, VR3.3)
	NET_C(VR3.1, GND)
	NET_C(VR3.2, C98.2)
	NET_C(C98.1, R127.1)

	NET_C(HELICOPTER_SOUND, VR8.3)
	NET_C(VR8.1, GND)
	NET_C(VR8.2, C103.2)
	NET_C(C103.1, R132.1)

	NET_C(WHISTLE_SOUND, VR6.3)
	NET_C(VR6.1, GND)
	NET_C(VR6.2, C101.2)
	NET_C(C101.1, R130.1)

	NET_C(MELODY, VR4.3)
	NET_C(VR4.1, GND)
	NET_C(VR4.2, C99.2)
	NET_C(C99.1, R128.1)

	ALIAS(OUTPUT, R128.2)

	//
	// Sheet 3, top (PISTOL SHOOT SND)
	//

	NET_C(PISTOL_SHOOT_SOUND_TRIG, R26.1, U20.9)
	NET_C(R26.2, I_V5)
	NET_C(U20.10, I_V5, U20.11)
	NET_C(U20.7, R37.1, C43.1)
	NET_C(R37.2, I_V5)
	NET_C(C43.2, U20.6)
	NET_C(U20.12, U19.5)
	NET_C(U19.6, R64.1, D7.K)
	NET_C(R64.2, I_V5)
	NET_C(D7.A, R65.1)
	NET_C(R65.2, C60.1, R66.1)
	NET_C(C60.2, GND)
	NET_C(R66.2, U25.12, R67.2)
	NET_C(R67.1, I_V5)
	NET_C(U25.13, U25.14, R58.1, U30.2)

	NET_C(NOISE2, C57.1)
	NET_C(C57.2, R62.1)
	NET_C(R62.2, R61.2, C55.2, C56.1)
	NET_C(R61.1, Q1.C)
	NET_C(Q1.E, GND)
	NET_C(Q1.B, R57.2, R58.2)
	NET_C(R57.1, GND)

	NET_C(C55.1, R63.1, U25.2)
	NET_C(C56.2, R63.2, U25.1, C77.1)
	NET_C(U25.3, I_V6)
	NET_C(C77.2, R101.1)
	NET_C(R101.2, R100.2, C78.2)
	NET_C(R100.1, GND)
	NET_C(C78.1, U30.1)
	NET_C(U30.14, C80.2)
	NET_C(C80.1, GND)
	NET_C(U30.15, C81.1)
	ALIAS(PISTOL_SHOOT_SOUND, C81.2)

	//
	// Sheet 3, bottom (BOMB DROP SOUND)
	//

	NET_C(BOMB_DROP_SOUND_TRIG, R33.1, U20.1)
	NET_C(R33.2, I_V5)
	NET_C(U20.2, U20.3, I_V5)
	NET_C(U20.15, R38.1, C44.1)
	NET_C(R38.2, I_V5)
	NET_C(C44.2, U20.14)
	NET_C(U20.4, R83.1, U21.2)
	NET_C(U21.7, R36.2, R35.1)
	NET_C(R36.1, I_V5)
	NET_C(R35.2, U21.6, C41.1)
	NET_C(C41.2, GND)
	NET_C(U21.5, C42.2)
	NET_C(U21.4, I_V5)
	NET_C(C42.1, GND)
	NET_C(U21.3, U19.3)
	NET_C(U19.4, R48.2, U29.12)
	NET_C(R48.1, I_V12)

	NET_C(R83.2, R84.2, Q3.B)
	NET_C(R84.1, GND)
	NET_C(Q3.E, GND)
	NET_C(Q3.C, Q4.B, R80.1)
	NET_C(R80.2, I_V12)
	NET_C(Q4.C, C64.1, U24.13, R81.2)
	NET_C(R81.1, I_V12)
	NET_C(U24.12, I_V6)
	NET_C(U24.14, U24.10, C64.2, R82.2)
	NET_C(R82.1, Q4.E)

	NET_C(U24.9, R78.1, R79.2)
	NET_C(R79.1, U24.7, U24.6)
	NET_C(U24.5, C62.1, R77.1, U24.2)
	NET_C(C62.2, GND)
	NET_C(R77.2, U24.1, R76.2)
	NET_C(R76.1, U24.3, R75.2)
	NET_C(R75.1, I_V6)
	NET_C(R78.2, U24.8, R72.1, R71.1)
	NET_C(R71.2, C59.1, U25.9, R70.2)
	NET_C(R72.2, R73.2, U25.10)
	NET_C(R73.1, GND)
	NET_C(C59.2, U25.8, U25.6, R107.2)
	NET_C(U25.5, R60.2, R59.1)
	NET_C(R60.1, I_V6)
	NET_C(R59.2, U25.7, R74.2)
	NET_C(R74.1, D8.A)
	NET_C(D8.K, R69.2, Q2.B)
	NET_C(R69.1, GND)
	NET_C(Q2.E, GND)
	NET_C(Q2.C, R70.1)

	NET_C(R107.1, R106.2, C85.2)
	NET_C(R106.1, GND)
	NET_C(C85.1, U29.11)
	NET_C(U29.10, R104.2, R105.1, C84.1)
	NET_C(R104.1, GND)
	NET_C(R105.2, I_V12)
	ALIAS(BOMB_DROP_SOUND, C84.2)

	//
	// Unconnected inputs
	//

	NET_C(GND, U4.2)
	NET_C(GND, U6.12, U6.13)
	NET_C(GND, U14.10)
	NET_C(GND, U19.1, U19.9, U19.13)
	NET_C(GND, U26.9, U26.10)
	NET_C(GND, U29.1, U29.2, U29.3, U29.4, U29.5, U29.13)
	NET_C(GND, U30.6, U30.10, U30.11)

	//
	// Unconnected outputs
	//

#if (ENABLE_FRONTIERS)

#define RXX 192
	OPTIMIZE_FRONTIER(BOMB_DROP_SOUND, RES_M(1), RXX)
	OPTIMIZE_FRONTIER(SMALL_EXPLOSION_SOUND, RES_M(1), RXX)
	OPTIMIZE_FRONTIER(LARGE_EXPLOSION_SOUND, RES_M(1), RXX)
	OPTIMIZE_FRONTIER(PISTOL_SHOOT_SOUND, RES_M(1), RXX)
	OPTIMIZE_FRONTIER(MISSILE_SOUND, RES_M(1), RXX)
	OPTIMIZE_FRONTIER(HELICOPTER_SOUND, RES_M(1), RXX)
	OPTIMIZE_FRONTIER(WHISTLE_SOUND, RES_M(1), RXX)
	OPTIMIZE_FRONTIER(MELODY, RES_M(1), RXX)
#endif

NETLIST_END()
